{"ast":null,"code":"// Token key name in local storage\nconst TOKEN_KEY = 'auth_token';\nconst USER_INFO_KEY = 'user_info';\n\n/**\r\n * Set the authentication token in local storage\r\n * @param {string} token - The JWT token\r\n */\nexport function setToken(token) {\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\n/**\r\n * Get the authentication token from local storage\r\n * @returns {string|null} The JWT token or null if not found\r\n */\nexport function getToken() {\n  return localStorage.getItem(TOKEN_KEY);\n}\n\n/**\r\n * Remove the authentication token from local storage\r\n */\nexport function removeToken() {\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(USER_INFO_KEY);\n}\n\n/**\r\n * Check if the user is authenticated (has a token)\r\n * @returns {boolean} True if authenticated, false otherwise\r\n */\nexport function isAuthenticated() {\n  return !!getToken();\n}\n\n/**\r\n * Set user information in local storage\r\n * @param {Object} userInfo - User information object\r\n */\nexport function setUserInfo(userInfo) {\n  localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\n}\n\n/**\r\n * Get user information from local storage\r\n * @returns {Object|null} User information or null if not found\r\n */\nexport function getUserInfo() {\n  const userInfo = localStorage.getItem(USER_INFO_KEY);\n  return userInfo ? JSON.parse(userInfo) : null;\n}\n\n/**\r\n * Get user ID from stored user information\r\n * @returns {string|null} User ID or null if not found\r\n */\nexport function getUserId() {\n  const userInfo = getUserInfo();\n  return userInfo ? userInfo._id : null;\n}\n\n/**\r\n * Get user role from stored user information\r\n * @returns {string|null} User role or null if not found\r\n */\nexport function getUserRole() {\n  const userInfo = getUserInfo();\n  return userInfo ? userInfo.role : null;\n}\n\n/**\r\n * Check if the current user has a specific role\r\n * @param {string} role - The role to check\r\n * @returns {boolean} True if the user has the role, false otherwise\r\n */\nexport function hasRole(role) {\n  const userRole = getUserRole();\n  return userRole === role;\n}","map":{"version":3,"names":["TOKEN_KEY","USER_INFO_KEY","setToken","token","localStorage","setItem","getToken","getItem","removeToken","removeItem","isAuthenticated","setUserInfo","userInfo","JSON","stringify","getUserInfo","parse","getUserId","_id","getUserRole","role","hasRole","userRole"],"sources":["D:/Code/coding/edu-platform/student-app/src/utils/auth.js"],"sourcesContent":["// Token key name in local storage\r\nconst TOKEN_KEY = 'auth_token';\r\nconst USER_INFO_KEY = 'user_info';\r\n\r\n/**\r\n * Set the authentication token in local storage\r\n * @param {string} token - The JWT token\r\n */\r\nexport function setToken(token) {\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n}\r\n\r\n/**\r\n * Get the authentication token from local storage\r\n * @returns {string|null} The JWT token or null if not found\r\n */\r\nexport function getToken() {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n}\r\n\r\n/**\r\n * Remove the authentication token from local storage\r\n */\r\nexport function removeToken() {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(USER_INFO_KEY);\r\n}\r\n\r\n/**\r\n * Check if the user is authenticated (has a token)\r\n * @returns {boolean} True if authenticated, false otherwise\r\n */\r\nexport function isAuthenticated() {\r\n    return !!getToken();\r\n}\r\n\r\n/**\r\n * Set user information in local storage\r\n * @param {Object} userInfo - User information object\r\n */\r\nexport function setUserInfo(userInfo) {\r\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\r\n}\r\n\r\n/**\r\n * Get user information from local storage\r\n * @returns {Object|null} User information or null if not found\r\n */\r\nexport function getUserInfo() {\r\n    const userInfo = localStorage.getItem(USER_INFO_KEY);\r\n    return userInfo ? JSON.parse(userInfo) : null;\r\n}\r\n\r\n/**\r\n * Get user ID from stored user information\r\n * @returns {string|null} User ID or null if not found\r\n */\r\nexport function getUserId() {\r\n    const userInfo = getUserInfo();\r\n    return userInfo ? userInfo._id : null;\r\n}\r\n\r\n/**\r\n * Get user role from stored user information\r\n * @returns {string|null} User role or null if not found\r\n */\r\nexport function getUserRole() {\r\n    const userInfo = getUserInfo();\r\n    return userInfo ? userInfo.role : null;\r\n}\r\n\r\n/**\r\n * Check if the current user has a specific role\r\n * @param {string} role - The role to check\r\n * @returns {boolean} True if the user has the role, false otherwise\r\n */\r\nexport function hasRole(role) {\r\n    const userRole = getUserRole();\r\n    return userRole === role;\r\n} "],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,YAAY;AAC9B,MAAMC,aAAa,GAAG,WAAW;;AAEjC;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,KAAK,EAAE;EAC5BC,YAAY,CAACC,OAAO,CAACL,SAAS,EAAEG,KAAK,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASG,QAAQA,CAAA,EAAG;EACvB,OAAOF,YAAY,CAACG,OAAO,CAACP,SAAS,CAAC;AAC1C;;AAEA;AACA;AACA;AACA,OAAO,SAASQ,WAAWA,CAAA,EAAG;EAC1BJ,YAAY,CAACK,UAAU,CAACT,SAAS,CAAC;EAClCI,YAAY,CAACK,UAAU,CAACR,aAAa,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASS,eAAeA,CAAA,EAAG;EAC9B,OAAO,CAAC,CAACJ,QAAQ,CAAC,CAAC;AACvB;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASK,WAAWA,CAACC,QAAQ,EAAE;EAClCR,YAAY,CAACC,OAAO,CAACJ,aAAa,EAAEY,IAAI,CAACC,SAAS,CAACF,QAAQ,CAAC,CAAC;AACjE;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASG,WAAWA,CAAA,EAAG;EAC1B,MAAMH,QAAQ,GAAGR,YAAY,CAACG,OAAO,CAACN,aAAa,CAAC;EACpD,OAAOW,QAAQ,GAAGC,IAAI,CAACG,KAAK,CAACJ,QAAQ,CAAC,GAAG,IAAI;AACjD;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASK,SAASA,CAAA,EAAG;EACxB,MAAML,QAAQ,GAAGG,WAAW,CAAC,CAAC;EAC9B,OAAOH,QAAQ,GAAGA,QAAQ,CAACM,GAAG,GAAG,IAAI;AACzC;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAAA,EAAG;EAC1B,MAAMP,QAAQ,GAAGG,WAAW,CAAC,CAAC;EAC9B,OAAOH,QAAQ,GAAGA,QAAQ,CAACQ,IAAI,GAAG,IAAI;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACD,IAAI,EAAE;EAC1B,MAAME,QAAQ,GAAGH,WAAW,CAAC,CAAC;EAC9B,OAAOG,QAAQ,KAAKF,IAAI;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}