{"ast":null,"code":"import { ref, onMounted, onUnmounted, nextTick } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { format } from 'date-fns';\nimport { getConsultationById } from '../../services/consultationService';\nimport { getCurrentUser } from '../../services/authService';\nimport { initSocket, joinConsultation, sendMessage, onNewMessage, markMessagesAsRead, onMessagesRead, onConsultationEnded } from '../../services/socketService';\nexport default {\n  name: 'ConsultationRoom',\n  setup() {\n    const route = useRoute();\n    // eslint-disable-next-line no-unused-vars\n    const router = useRouter();\n    const {\n      id\n    } = route.params;\n    const consultation = ref(null);\n    const messages = ref([]);\n    const loading = ref(true);\n    const error = ref('');\n    const newMessage = ref('');\n    const sending = ref(false);\n    const messagesContainer = ref(null);\n    const messagesEnd = ref(null);\n    const messageInput = ref(null);\n    const currentUser = getCurrentUser();\n    let socket = null;\n\n    // 滚动到最新消息\n    const scrollToBottom = () => {\n      nextTick(() => {\n        if (messagesEnd.value) {\n          messagesEnd.value.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      });\n    };\n\n    // 格式化消息时间\n    const formatTime = dateString => {\n      return format(new Date(dateString), 'HH:mm');\n    };\n\n    // 处理发送消息\n    const handleSendMessage = async () => {\n      if (!newMessage.value.trim() || sending.value) return;\n      try {\n        sending.value = true;\n\n        // 发送消息\n        const sentMessage = await sendMessage(consultation.value._id, newMessage.value);\n\n        // 添加到本地消息列表\n        messages.value.push(sentMessage);\n\n        // 清空输入框并滚动到底部\n        newMessage.value = '';\n        scrollToBottom();\n        sending.value = false;\n\n        // 聚焦输入框\n        nextTick(() => {\n          if (messageInput.value) {\n            messageInput.value.focus();\n          }\n        });\n      } catch (err) {\n        error.value = '发送消息失败，请重试';\n        sending.value = false;\n        console.error('发送消息错误:', err);\n      }\n    };\n\n    // 处理键盘事件\n    const handleKeyDown = e => {\n      // Enter发送，Shift+Enter换行\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    };\n\n    // 初始化咨询室\n    onMounted(async () => {\n      try {\n        loading.value = true;\n\n        // 获取咨询详情\n        const data = await getConsultationById(id);\n        consultation.value = data;\n\n        // 检查咨询状态\n        if (data.status !== 'accepted' && data.status !== 'completed') {\n          error.value = '咨询尚未开始或已结束';\n          loading.value = false;\n          return;\n        }\n\n        // 初始化Socket连接\n        socket = initSocket();\n\n        // 加入咨询房间\n        const roomData = await joinConsultation(id);\n        messages.value = roomData.messages || [];\n\n        // 监听新消息\n        onNewMessage(newMsg => {\n          messages.value.push(newMsg);\n          scrollToBottom();\n\n          // 如果不是自己发的消息，标记为已读\n          if (newMsg.sender !== currentUser._id) {\n            markMessagesAsRead(id);\n          }\n        });\n\n        // 监听消息已读状态\n        onMessagesRead(data => {\n          if (data.consultationId === id) {\n            // 更新消息已读状态\n            messages.value = messages.value.map(msg => msg.sender === currentUser._id ? {\n              ...msg,\n              read: true\n            } : msg);\n          }\n        });\n\n        // 监听咨询结束\n        onConsultationEnded(data => {\n          if (data.consultationId === id) {\n            // 显示咨询结束提示\n            alert('咨询已结束');\n            // 刷新咨询状态\n            consultation.value = {\n              ...consultation.value,\n              status: 'completed'\n            };\n          }\n        });\n\n        // 标记消息为已读\n        if (messages.value.some(msg => msg.sender !== currentUser._id && !msg.read)) {\n          markMessagesAsRead(id);\n        }\n        loading.value = false;\n        scrollToBottom();\n\n        // 聚焦输入框\n        nextTick(() => {\n          if (messageInput.value) {\n            messageInput.value.focus();\n          }\n        });\n      } catch (err) {\n        error.value = err.message || '加载咨询室失败';\n        loading.value = false;\n        console.error('加载咨询室错误:', err);\n      }\n    });\n\n    // 组件销毁时清理\n    onUnmounted(() => {\n      // 清理任何监听器\n      if (socket) {\n        socket.off('newMessage');\n        socket.off('messagesRead');\n        socket.off('consultationEnded');\n      }\n    });\n    return {\n      id,\n      consultation,\n      messages,\n      loading,\n      error,\n      newMessage,\n      sending,\n      currentUser,\n      messagesContainer,\n      messagesEnd,\n      messageInput,\n      formatTime,\n      handleSendMessage,\n      handleKeyDown\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","nextTick","useRoute","useRouter","format","getConsultationById","getCurrentUser","initSocket","joinConsultation","sendMessage","onNewMessage","markMessagesAsRead","onMessagesRead","onConsultationEnded","name","setup","route","router","id","params","consultation","messages","loading","error","newMessage","sending","messagesContainer","messagesEnd","messageInput","currentUser","socket","scrollToBottom","value","scrollIntoView","behavior","formatTime","dateString","Date","handleSendMessage","trim","sentMessage","_id","push","focus","err","console","handleKeyDown","e","key","shiftKey","preventDefault","data","status","roomData","newMsg","sender","consultationId","map","msg","read","alert","some","message","off"],"sources":["D:\\Code\\coding\\edu-platform\\client\\src\\views\\student\\ConsultationRoom.vue"],"sourcesContent":["<template>\r\n    <div class=\"consultation-room\">\r\n        <div v-if=\"loading\" class=\"loading-state\">\r\n            <i class=\"fas fa-spinner fa-spin\"></i>\r\n            <p>正在进入咨询室...</p>\r\n        </div>\r\n\r\n        <div v-else-if=\"error\" class=\"error-state\">\r\n            <i class=\"fas fa-exclamation-circle\"></i>\r\n            <p>{{ error }}</p>\r\n            <router-link to=\"/student/consultations\" class=\"back-button\">\r\n                返回咨询列表\r\n            </router-link>\r\n        </div>\r\n\r\n        <template v-else>\r\n            <div class=\"room-header\">\r\n                <div class=\"header-left\">\r\n                    <router-link :to=\"`/student/consultation/detail/${id}`\" class=\"back-link\">\r\n                        <i class=\"fas fa-arrow-left\"></i> 返回咨询详情\r\n                    </router-link>\r\n                    <h1>启明隅在线咨询室</h1>\r\n                </div>\r\n                <div class=\"header-right\">\r\n                    <div class=\"teacher-info\">\r\n                        <img :src=\"consultation.teacher.avatar || '/images/default-avatar.jpg'\"\r\n                            :alt=\"consultation.teacher.name\" class=\"teacher-avatar\" />\r\n                        <div class=\"teacher-name\">{{ consultation.teacher.name }} 老师</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"messages-container\" ref=\"messagesContainer\">\r\n                <div v-if=\"messages.length === 0\" class=\"empty-messages\">\r\n                    <i class=\"fas fa-comments\"></i>\r\n                    <p>咨询已开始，请发送消息</p>\r\n                </div>\r\n\r\n                <template v-else>\r\n                    <div v-for=\"(msg, index) in messages\" :key=\"index\"\r\n                        :class=\"['message', msg.sender === currentUser._id ? 'outgoing' : 'incoming']\">\r\n                        <div class=\"message-content\">\r\n                            <div class=\"message-text\">{{ msg.content }}</div>\r\n                            <div class=\"message-time\">{{ formatTime(msg.createdAt) }}</div>\r\n                            <div v-if=\"msg.read && msg.sender === currentUser._id\" class=\"message-status\">\r\n                                <i class=\"fas fa-check\"></i> 已读\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </template>\r\n\r\n                <div ref=\"messagesEnd\"></div>\r\n            </div>\r\n\r\n            <div class=\"message-input-container\">\r\n                <form @submit.prevent=\"handleSendMessage\" class=\"message-form\">\r\n                    <textarea v-model=\"newMessage\" placeholder=\"输入消息...\" ref=\"messageInput\" class=\"message-textarea\"\r\n                        :disabled=\"sending\" @keydown=\"handleKeyDown\"></textarea>\r\n\r\n                    <button type=\"submit\" class=\"send-button\" :disabled=\"sending || !newMessage.trim()\">\r\n                        <i v-if=\"sending\" class=\"fas fa-spinner fa-spin\"></i>\r\n                        <i v-else class=\"fas fa-paper-plane\"></i>\r\n                        发送\r\n                    </button>\r\n                </form>\r\n\r\n                <div class=\"input-tips\">\r\n                    按Enter键发送，Shift+Enter换行\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onUnmounted, nextTick } from 'vue'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport { format } from 'date-fns'\r\nimport { getConsultationById } from '../../services/consultationService'\r\nimport { getCurrentUser } from '../../services/authService'\r\nimport {\r\n    initSocket,\r\n    joinConsultation,\r\n    sendMessage,\r\n    onNewMessage,\r\n    markMessagesAsRead,\r\n    onMessagesRead,\r\n    onConsultationEnded\r\n} from '../../services/socketService'\r\n\r\nexport default {\r\n    name: 'ConsultationRoom',\r\n    setup() {\r\n        const route = useRoute()\r\n        // eslint-disable-next-line no-unused-vars\r\n        const router = useRouter()\r\n        const { id } = route.params\r\n\r\n        const consultation = ref(null)\r\n        const messages = ref([])\r\n        const loading = ref(true)\r\n        const error = ref('')\r\n        const newMessage = ref('')\r\n        const sending = ref(false)\r\n        const messagesContainer = ref(null)\r\n        const messagesEnd = ref(null)\r\n        const messageInput = ref(null)\r\n\r\n        const currentUser = getCurrentUser()\r\n        let socket = null\r\n\r\n        // 滚动到最新消息\r\n        const scrollToBottom = () => {\r\n            nextTick(() => {\r\n                if (messagesEnd.value) {\r\n                    messagesEnd.value.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            })\r\n        }\r\n\r\n        // 格式化消息时间\r\n        const formatTime = (dateString) => {\r\n            return format(new Date(dateString), 'HH:mm')\r\n        }\r\n\r\n        // 处理发送消息\r\n        const handleSendMessage = async () => {\r\n            if (!newMessage.value.trim() || sending.value) return\r\n\r\n            try {\r\n                sending.value = true\r\n\r\n                // 发送消息\r\n                const sentMessage = await sendMessage(consultation.value._id, newMessage.value)\r\n\r\n                // 添加到本地消息列表\r\n                messages.value.push(sentMessage)\r\n\r\n                // 清空输入框并滚动到底部\r\n                newMessage.value = ''\r\n                scrollToBottom()\r\n\r\n                sending.value = false\r\n\r\n                // 聚焦输入框\r\n                nextTick(() => {\r\n                    if (messageInput.value) {\r\n                        messageInput.value.focus()\r\n                    }\r\n                })\r\n            } catch (err) {\r\n                error.value = '发送消息失败，请重试'\r\n                sending.value = false\r\n                console.error('发送消息错误:', err)\r\n            }\r\n        }\r\n\r\n        // 处理键盘事件\r\n        const handleKeyDown = (e) => {\r\n            // Enter发送，Shift+Enter换行\r\n            if (e.key === 'Enter' && !e.shiftKey) {\r\n                e.preventDefault()\r\n                handleSendMessage()\r\n            }\r\n        }\r\n\r\n        // 初始化咨询室\r\n        onMounted(async () => {\r\n            try {\r\n                loading.value = true\r\n\r\n                // 获取咨询详情\r\n                const data = await getConsultationById(id)\r\n                consultation.value = data\r\n\r\n                // 检查咨询状态\r\n                if (data.status !== 'accepted' && data.status !== 'completed') {\r\n                    error.value = '咨询尚未开始或已结束'\r\n                    loading.value = false\r\n                    return\r\n                }\r\n\r\n                // 初始化Socket连接\r\n                socket = initSocket()\r\n\r\n                // 加入咨询房间\r\n                const roomData = await joinConsultation(id)\r\n                messages.value = roomData.messages || []\r\n\r\n                // 监听新消息\r\n                onNewMessage((newMsg) => {\r\n                    messages.value.push(newMsg)\r\n                    scrollToBottom()\r\n\r\n                    // 如果不是自己发的消息，标记为已读\r\n                    if (newMsg.sender !== currentUser._id) {\r\n                        markMessagesAsRead(id)\r\n                    }\r\n                })\r\n\r\n                // 监听消息已读状态\r\n                onMessagesRead((data) => {\r\n                    if (data.consultationId === id) {\r\n                        // 更新消息已读状态\r\n                        messages.value = messages.value.map(msg =>\r\n                            msg.sender === currentUser._id ? { ...msg, read: true } : msg\r\n                        )\r\n                    }\r\n                })\r\n\r\n                // 监听咨询结束\r\n                onConsultationEnded((data) => {\r\n                    if (data.consultationId === id) {\r\n                        // 显示咨询结束提示\r\n                        alert('咨询已结束')\r\n                        // 刷新咨询状态\r\n                        consultation.value = { ...consultation.value, status: 'completed' }\r\n                    }\r\n                })\r\n\r\n                // 标记消息为已读\r\n                if (messages.value.some(msg => msg.sender !== currentUser._id && !msg.read)) {\r\n                    markMessagesAsRead(id)\r\n                }\r\n\r\n                loading.value = false\r\n                scrollToBottom()\r\n\r\n                // 聚焦输入框\r\n                nextTick(() => {\r\n                    if (messageInput.value) {\r\n                        messageInput.value.focus()\r\n                    }\r\n                })\r\n            } catch (err) {\r\n                error.value = err.message || '加载咨询室失败'\r\n                loading.value = false\r\n                console.error('加载咨询室错误:', err)\r\n            }\r\n        })\r\n\r\n        // 组件销毁时清理\r\n        onUnmounted(() => {\r\n            // 清理任何监听器\r\n            if (socket) {\r\n                socket.off('newMessage')\r\n                socket.off('messagesRead')\r\n                socket.off('consultationEnded')\r\n            }\r\n        })\r\n\r\n        return {\r\n            id,\r\n            consultation,\r\n            messages,\r\n            loading,\r\n            error,\r\n            newMessage,\r\n            sending,\r\n            currentUser,\r\n            messagesContainer,\r\n            messagesEnd,\r\n            messageInput,\r\n            formatTime,\r\n            handleSendMessage,\r\n            handleKeyDown\r\n        }\r\n    }\r\n}\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}