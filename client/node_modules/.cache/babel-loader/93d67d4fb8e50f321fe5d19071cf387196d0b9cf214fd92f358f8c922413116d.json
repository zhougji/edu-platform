{"ast":null,"code":"import { ref, watch, nextTick, onMounted } from 'vue';\nimport { VueMarkdown } from 'vue-markdown-render';\nimport { sendMessage } from '../../services/aiService';\nexport default {\n  name: 'AIChat',\n  components: {\n    VueMarkdown\n  },\n  props: {\n    chat: {\n      type: Object,\n      default: null\n    },\n    onChatUpdate: {\n      type: Function,\n      required: true\n    }\n  },\n  setup(props) {\n    const message = ref('');\n    const isLoading = ref(false);\n    const error = ref('');\n    const messagesEnd = ref(null);\n    const inputElement = ref(null);\n    const messagesContainer = ref(null);\n\n    // 滚动到底部\n    const scrollToBottom = () => {\n      nextTick(() => {\n        if (messagesEnd.value) {\n          messagesEnd.value.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      });\n    };\n\n    // 监听消息变化，自动滚动\n    watch(() => props.chat?.messages, () => {\n      scrollToBottom();\n    }, {\n      deep: true\n    });\n\n    // 组件挂载时滚动到底部并聚焦输入框\n    onMounted(() => {\n      scrollToBottom();\n      if (inputElement.value) {\n        inputElement.value.focus();\n      }\n    });\n\n    // 处理键盘事件\n    const handleKeyDown = e => {\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        handleSubmit();\n      }\n    };\n\n    // 设置示例问题\n    const setExampleQuestion = question => {\n      message.value = question;\n      nextTick(() => {\n        if (inputElement.value) {\n          inputElement.value.focus();\n        }\n      });\n    };\n\n    // 发送消息\n    const handleSubmit = async () => {\n      if (!message.value.trim() || isLoading.value) return;\n      const messageText = message.value.trim();\n      message.value = '';\n      error.value = '';\n      try {\n        isLoading.value = true;\n\n        // 如果有现有对话，则将消息添加到该对话\n        // 否则创建新对话\n        const updatedChat = await sendMessage(messageText, props.chat?._id, props.chat?.subject);\n\n        // 通知父组件更新\n        props.onChatUpdate(updatedChat);\n\n        // 重置加载状态\n        isLoading.value = false;\n\n        // 聚焦输入框\n        nextTick(() => {\n          if (inputElement.value) {\n            inputElement.value.focus();\n          }\n        });\n      } catch (err) {\n        error.value = err.message || '发送消息失败，请重试';\n        isLoading.value = false;\n        console.error('发送消息错误:', err);\n      }\n    };\n    return {\n      message,\n      isLoading,\n      error,\n      messagesEnd,\n      inputElement,\n      messagesContainer,\n      handleSubmit,\n      handleKeyDown,\n      setExampleQuestion\n    };\n  }\n};","map":{"version":3,"names":["ref","watch","nextTick","onMounted","VueMarkdown","sendMessage","name","components","props","chat","type","Object","default","onChatUpdate","Function","required","setup","message","isLoading","error","messagesEnd","inputElement","messagesContainer","scrollToBottom","value","scrollIntoView","behavior","messages","deep","focus","handleKeyDown","e","key","shiftKey","preventDefault","handleSubmit","setExampleQuestion","question","trim","messageText","updatedChat","_id","subject","err","console"],"sources":["D:\\Code\\coding\\edu-platform\\client\\src\\components\\ai\\AIChat.vue"],"sourcesContent":["<template>\r\n  <div class=\"ai-chat-container\">\r\n    <div class=\"chat-messages\" ref=\"messagesContainer\">\r\n      <!-- 欢迎消息 -->\r\n      <div v-if=\"(!chat || !chat.messages || chat.messages.length === 0) && !isLoading\" class=\"welcome-message\">\r\n        <div class=\"ai-avatar\">\r\n          <i class=\"fas fa-robot\"></i>\r\n        </div>\r\n        <div class=\"welcome-content\">\r\n          <h2>欢迎使用启明隅AI学习助手</h2>\r\n          <p>您可以向我提问任何学习相关的问题，例如：</p>\r\n          <div class=\"example-questions\">\r\n            <div class=\"example-question\" @click=\"setExampleQuestion('请解释一下牛顿第二定律')\">\r\n              请解释一下牛顿第二定律\r\n            </div>\r\n            <div class=\"example-question\" @click=\"setExampleQuestion('如何解二元一次方程组？')\">\r\n              如何解二元一次方程组？\r\n            </div>\r\n            <div class=\"example-question\" @click=\"setExampleQuestion('帮我准备一下关于光合作用的复习提纲')\">\r\n              帮我准备一下关于光合作用的复习提纲\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 对话消息 -->\r\n      <template v-if=\"chat && chat.messages\">\r\n        <div\r\n          v-for=\"(msg, index) in chat.messages\"\r\n          :key=\"index\"\r\n          :class=\"['message', msg.role === 'assistant' ? 'ai-message' : 'user-message']\"\r\n        >\r\n          <div v-if=\"msg.role === 'assistant'\" class=\"ai-avatar\">\r\n            <i class=\"fas fa-robot\"></i>\r\n          </div>\r\n          <div v-else class=\"user-avatar\">\r\n            <i class=\"fas fa-user\"></i>\r\n          </div>\r\n          <div class=\"message-content\">\r\n            <div class=\"message-header\">\r\n              <span class=\"message-sender\">{{ msg.role === 'assistant' ? '启明助手' : '我' }}</span>\r\n            </div>\r\n            <div class=\"message-text\">\r\n              <div v-if=\"msg.role === 'assistant'\" class=\"markdown-content\">\r\n                <VueMarkdown>{{ msg.content }}</VueMarkdown>\r\n              </div>\r\n              <div v-else>{{ msg.content }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </template>\r\n\r\n      <!-- 加载状态 -->\r\n      <div v-if=\"isLoading\" class=\"message ai-message\">\r\n        <div class=\"ai-avatar\">\r\n          <i class=\"fas fa-robot\"></i>\r\n        </div>\r\n        <div class=\"message-content\">\r\n          <div class=\"message-header\">\r\n            <span class=\"message-sender\">启明助手</span>\r\n          </div>\r\n          <div class=\"message-text\">\r\n            <div class=\"typing-indicator\">\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 错误消息 -->\r\n      <div v-if=\"error\" class=\"error-message\">\r\n        <i class=\"fas fa-exclamation-circle\"></i>\r\n        <span>{{ error }}</span>\r\n      </div>\r\n\r\n      <div ref=\"messagesEnd\"></div>\r\n    </div>\r\n\r\n    <form class=\"chat-input-form\" @submit.prevent=\"handleSubmit\">\r\n      <textarea\r\n        ref=\"inputElement\"\r\n        v-model=\"message\"\r\n        placeholder=\"向启明助手提问...\"\r\n        class=\"chat-input\"\r\n        :disabled=\"isLoading\"\r\n        @keydown=\"handleKeyDown\"\r\n      ></textarea>\r\n      <button\r\n        type=\"submit\"\r\n        class=\"send-button\"\r\n        :disabled=\"isLoading || !message.trim()\"\r\n      >\r\n        <i v-if=\"isLoading\" class=\"fas fa-spinner fa-spin\"></i>\r\n        <i v-else class=\"fas fa-paper-plane\"></i>\r\n        发送\r\n      </button>\r\n    </form>\r\n\r\n    <div class=\"input-tips\">\r\n      按Enter键发送，Shift+Enter换行\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watch, nextTick, onMounted } from 'vue'\r\nimport { VueMarkdown } from 'vue-markdown-render'\r\nimport { sendMessage } from '../../services/aiService'\r\n\r\nexport default {\r\n  name: 'AIChat',\r\n  components: {\r\n    VueMarkdown\r\n  },\r\n  props: {\r\n    chat: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    onChatUpdate: {\r\n      type: Function,\r\n      required: true\r\n    }\r\n  },\r\n  setup(props) {\r\n    const message = ref('')\r\n    const isLoading = ref(false)\r\n    const error = ref('')\r\n    const messagesEnd = ref(null)\r\n    const inputElement = ref(null)\r\n    const messagesContainer = ref(null)\r\n\r\n    // 滚动到底部\r\n    const scrollToBottom = () => {\r\n      nextTick(() => {\r\n        if (messagesEnd.value) {\r\n          messagesEnd.value.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n      })\r\n    }\r\n\r\n    // 监听消息变化，自动滚动\r\n    watch(() => props.chat?.messages, () => {\r\n      scrollToBottom()\r\n    }, { deep: true })\r\n\r\n    // 组件挂载时滚动到底部并聚焦输入框\r\n    onMounted(() => {\r\n      scrollToBottom()\r\n      if (inputElement.value) {\r\n        inputElement.value.focus()\r\n      }\r\n    })\r\n\r\n    // 处理键盘事件\r\n    const handleKeyDown = (e) => {\r\n      if (e.key === 'Enter' && !e.shiftKey) {\r\n        e.preventDefault()\r\n        handleSubmit()\r\n      }\r\n    }\r\n\r\n    // 设置示例问题\r\n    const setExampleQuestion = (question) => {\r\n      message.value = question\r\n      nextTick(() => {\r\n        if (inputElement.value) {\r\n          inputElement.value.focus()\r\n        }\r\n      })\r\n    }\r\n\r\n    // 发送消息\r\n    const handleSubmit = async () => {\r\n      if (!message.value.trim() || isLoading.value) return\r\n\r\n      const messageText = message.value.trim()\r\n      message.value = ''\r\n      error.value = ''\r\n\r\n      try {\r\n        isLoading.value = true\r\n\r\n        // 如果有现有对话，则将消息添加到该对话\r\n        // 否则创建新对话\r\n        const updatedChat = await sendMessage(\r\n          messageText,\r\n          props.chat?._id,\r\n          props.chat?.subject\r\n        )\r\n\r\n        // 通知父组件更新\r\n        props.onChatUpdate(updatedChat)\r\n\r\n        // 重置加载状态\r\n        isLoading.value = false\r\n\r\n        // 聚焦输入框\r\n        nextTick(() => {\r\n          if (inputElement.value) {\r\n            inputElement.value.focus()\r\n          }\r\n        })\r\n      } catch (err) {\r\n        error.value = err.message || '发送消息失败，请重试'\r\n        isLoading.value = false\r\n        console.error('发送消息错误:', err)\r\n      }\r\n    }\r\n\r\n    return {\r\n      message,\r\n      isLoading,\r\n      error,\r\n      messagesEnd,\r\n      inputElement,\r\n      messagesContainer,\r\n      handleSubmit,\r\n      handleKeyDown,\r\n      setExampleQuestion\r\n    }\r\n  }\r\n}\r\n</script> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}