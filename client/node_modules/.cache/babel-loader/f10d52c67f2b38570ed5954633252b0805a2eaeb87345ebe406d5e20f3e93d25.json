{"ast":null,"code":"import io from 'socket.io-client';\nimport { getCurrentUser } from './authService';\nlet socket = null;\n\n// 初始化Socket连接\nexport const initSocket = () => {\n  const user = getCurrentUser();\n  const token = localStorage.getItem('token');\n  if (!user || !token) {\n    console.error('未登录，无法建立WebSocket连接');\n    return null;\n  }\n\n  // 连接WebSocket，传递认证信息\n  socket = io('/', {\n    auth: {\n      token\n    },\n    query: {\n      token\n    }\n  });\n\n  // 连接事件\n  socket.on('connect', () => {\n    console.log('WebSocket连接已建立');\n  });\n\n  // 错误处理\n  socket.on('connect_error', error => {\n    console.error('WebSocket连接错误:', error.message);\n  });\n  socket.on('error', error => {\n    console.error('WebSocket错误:', error.message);\n  });\n\n  // 断开连接\n  socket.on('disconnect', reason => {\n    console.log('WebSocket连接已断开:', reason);\n  });\n  return socket;\n};\n\n// 获取Socket实例\nexport const getSocket = () => {\n  if (!socket) {\n    return initSocket();\n  }\n  return socket;\n};\n\n// 关闭Socket连接\nexport const closeSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n  }\n};\n\n// 监听咨询请求通知\nexport const onNewConsultation = callback => {\n  const socket = getSocket();\n  if (socket) {\n    socket.on('consultation:new', callback);\n  }\n};\n\n// 监听咨询状态变更\nexport const onConsultationStatus = callback => {\n  const socket = getSocket();\n  if (socket) {\n    socket.on('consultation:status', callback);\n  }\n};\n\n// 监听咨询准备就绪\nexport const onConsultationReady = callback => {\n  const socket = getSocket();\n  if (socket) {\n    socket.on('consultation:ready', callback);\n  }\n};\n\n// 监听新消息\nexport const onNewMessage = callback => {\n  const socket = getSocket();\n  if (socket) {\n    socket.on('consultation:message', callback);\n  }\n};\n\n// 监听消息已读状态\nexport const onMessagesRead = callback => {\n  const socket = getSocket();\n  if (socket) {\n    socket.on('consultation:read', callback);\n  }\n};\n\n// 监听咨询结束\nexport const onConsultationEnded = callback => {\n  const socket = getSocket();\n  if (socket) {\n    socket.on('consultation:ended', callback);\n  }\n};\n\n// 发送咨询请求通知\nexport const sendConsultationRequest = consultationId => {\n  const socket = getSocket();\n  if (socket) {\n    socket.emit('consultation:request', {\n      consultationId\n    });\n  }\n};\n\n// 更新咨询状态（教师使用）\nexport const updateStatus = (consultationId, status) => {\n  const socket = getSocket();\n  if (socket) {\n    socket.emit('consultation:status', {\n      consultationId,\n      status\n    });\n  }\n};\n\n// 加入咨询房间\nexport const joinConsultation = consultationId => {\n  const socket = getSocket();\n  if (socket) {\n    socket.emit('consultation:join', {\n      consultationId\n    });\n  }\n};\n\n// 发送咨询消息\nexport const sendMessage = (consultationId, content) => {\n  const socket = getSocket();\n  if (socket) {\n    socket.emit('consultation:message', {\n      consultationId,\n      content\n    });\n  }\n};\n\n// 标记消息已读\nexport const markMessagesAsRead = (consultationId, messageIds) => {\n  const socket = getSocket();\n  if (socket) {\n    socket.emit('consultation:read', {\n      consultationId,\n      messageIds\n    });\n  }\n};\n\n// 结束咨询（教师使用）\nexport const endConsultation = consultationId => {\n  const socket = getSocket();\n  if (socket) {\n    socket.emit('consultation:end', {\n      consultationId\n    });\n  }\n};\n\n// 移除所有监听器\nexport const removeAllListeners = () => {\n  const socket = getSocket();\n  if (socket) {\n    socket.removeAllListeners('consultation:new');\n    socket.removeAllListeners('consultation:status');\n    socket.removeAllListeners('consultation:ready');\n    socket.removeAllListeners('consultation:message');\n    socket.removeAllListeners('consultation:read');\n    socket.removeAllListeners('consultation:ended');\n  }\n};","map":{"version":3,"names":["io","getCurrentUser","socket","initSocket","user","token","localStorage","getItem","console","error","auth","query","on","log","message","reason","getSocket","closeSocket","disconnect","onNewConsultation","callback","onConsultationStatus","onConsultationReady","onNewMessage","onMessagesRead","onConsultationEnded","sendConsultationRequest","consultationId","emit","updateStatus","status","joinConsultation","sendMessage","content","markMessagesAsRead","messageIds","endConsultation","removeAllListeners"],"sources":["D:/Code/coding/edu-platform/client/src/services/socketService.js"],"sourcesContent":["import io from 'socket.io-client';\r\nimport { getCurrentUser } from './authService';\r\n\r\nlet socket = null;\r\n\r\n// 初始化Socket连接\r\nexport const initSocket = () => {\r\n    const user = getCurrentUser();\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (!user || !token) {\r\n        console.error('未登录，无法建立WebSocket连接');\r\n        return null;\r\n    }\r\n\r\n    // 连接WebSocket，传递认证信息\r\n    socket = io('/', {\r\n        auth: { token },\r\n        query: { token }\r\n    });\r\n\r\n    // 连接事件\r\n    socket.on('connect', () => {\r\n        console.log('WebSocket连接已建立');\r\n    });\r\n\r\n    // 错误处理\r\n    socket.on('connect_error', (error) => {\r\n        console.error('WebSocket连接错误:', error.message);\r\n    });\r\n\r\n    socket.on('error', (error) => {\r\n        console.error('WebSocket错误:', error.message);\r\n    });\r\n\r\n    // 断开连接\r\n    socket.on('disconnect', (reason) => {\r\n        console.log('WebSocket连接已断开:', reason);\r\n    });\r\n\r\n    return socket;\r\n};\r\n\r\n// 获取Socket实例\r\nexport const getSocket = () => {\r\n    if (!socket) {\r\n        return initSocket();\r\n    }\r\n    return socket;\r\n};\r\n\r\n// 关闭Socket连接\r\nexport const closeSocket = () => {\r\n    if (socket) {\r\n        socket.disconnect();\r\n        socket = null;\r\n    }\r\n};\r\n\r\n// 监听咨询请求通知\r\nexport const onNewConsultation = (callback) => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.on('consultation:new', callback);\r\n    }\r\n};\r\n\r\n// 监听咨询状态变更\r\nexport const onConsultationStatus = (callback) => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.on('consultation:status', callback);\r\n    }\r\n};\r\n\r\n// 监听咨询准备就绪\r\nexport const onConsultationReady = (callback) => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.on('consultation:ready', callback);\r\n    }\r\n};\r\n\r\n// 监听新消息\r\nexport const onNewMessage = (callback) => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.on('consultation:message', callback);\r\n    }\r\n};\r\n\r\n// 监听消息已读状态\r\nexport const onMessagesRead = (callback) => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.on('consultation:read', callback);\r\n    }\r\n};\r\n\r\n// 监听咨询结束\r\nexport const onConsultationEnded = (callback) => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.on('consultation:ended', callback);\r\n    }\r\n};\r\n\r\n// 发送咨询请求通知\r\nexport const sendConsultationRequest = (consultationId) => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.emit('consultation:request', { consultationId });\r\n    }\r\n};\r\n\r\n// 更新咨询状态（教师使用）\r\nexport const updateStatus = (consultationId, status) => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.emit('consultation:status', { consultationId, status });\r\n    }\r\n};\r\n\r\n// 加入咨询房间\r\nexport const joinConsultation = (consultationId) => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.emit('consultation:join', { consultationId });\r\n    }\r\n};\r\n\r\n// 发送咨询消息\r\nexport const sendMessage = (consultationId, content) => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.emit('consultation:message', { consultationId, content });\r\n    }\r\n};\r\n\r\n// 标记消息已读\r\nexport const markMessagesAsRead = (consultationId, messageIds) => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.emit('consultation:read', { consultationId, messageIds });\r\n    }\r\n};\r\n\r\n// 结束咨询（教师使用）\r\nexport const endConsultation = (consultationId) => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.emit('consultation:end', { consultationId });\r\n    }\r\n};\r\n\r\n// 移除所有监听器\r\nexport const removeAllListeners = () => {\r\n    const socket = getSocket();\r\n    if (socket) {\r\n        socket.removeAllListeners('consultation:new');\r\n        socket.removeAllListeners('consultation:status');\r\n        socket.removeAllListeners('consultation:ready');\r\n        socket.removeAllListeners('consultation:message');\r\n        socket.removeAllListeners('consultation:read');\r\n        socket.removeAllListeners('consultation:ended');\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}