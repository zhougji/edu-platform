{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/auth';\n\n// 设置请求拦截器，添加认证令牌\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 登录 - 密码方式\nexport const login = async (contactType, contact, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, {\n      contactType,\n      contact,\n      password\n    });\n\n    // 存储用户信息和令牌\n    localStorage.setItem('user', JSON.stringify(response.data.user));\n    localStorage.setItem('token', response.data.token);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.error || '登录失败，请检查您的凭据');\n  }\n};\n\n// 登录 - 验证码方式\nexport const loginWithVerification = async (contactType, contact, verificationCode) => {\n  try {\n    const response = await axios.post(`${API_URL}/login/verification`, {\n      contactType,\n      contact,\n      verificationCode\n    });\n\n    // 存储用户信息和令牌\n    localStorage.setItem('user', JSON.stringify(response.data.user));\n    localStorage.setItem('token', response.data.token);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.error || '登录失败，验证码可能无效或已过期');\n  }\n};\n\n// 注册\nexport const register = async (name, contactType, contact, verificationCode, password, role) => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, {\n      name,\n      contactType,\n      contact,\n      verificationCode,\n      password,\n      role\n    });\n\n    // 存储用户信息和令牌\n    localStorage.setItem('user', JSON.stringify(response.data.user));\n    localStorage.setItem('token', response.data.token);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.error || '注册失败，请稍后重试');\n  }\n};\n\n// 登出\nexport const logout = async () => {\n  try {\n    await axios.post(`${API_URL}/logout`);\n\n    // 清除本地存储的用户信息和令牌\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    return {\n      success: true\n    };\n  } catch (error) {\n    throw new Error(error.response?.data?.error || '登出失败');\n  }\n};\n\n// 从localStorage获取当前用户信息\nexport const getCurrentUser = () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) return null;\n\n    // 这里简单返回一个临时用户对象用于测试\n    // 实际应用中应解析JWT并获取真实用户信息\n    return {\n      id: '1',\n      name: '测试用户',\n      role: 'student'\n    };\n  } catch (error) {\n    console.error('获取当前用户失败:', error);\n    return null;\n  }\n};\n\n// 更新用户资料\nexport const updateProfile = async profileData => {\n  try {\n    const response = await axios.patch(`${API_URL}/profile`, profileData);\n\n    // 更新本地存储的用户信息\n    localStorage.setItem('user', JSON.stringify(response.data));\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.error || '更新资料失败');\n  }\n};\n\n// 教师实名认证\nexport const teacherVerification = async verificationData => {\n  try {\n    const response = await axios.post(`${API_URL}/teacher/verify`, verificationData);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.error || '提交认证信息失败');\n  }\n};","map":{"version":3,"names":["axios","API_URL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","login","contactType","contact","password","response","post","setItem","JSON","stringify","data","user","Error","loginWithVerification","verificationCode","register","name","role","logout","removeItem","success","getCurrentUser","id","console","updateProfile","profileData","patch","teacherVerification","verificationData"],"sources":["D:/Code/coding/edu-platform/client/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = '/api/auth';\r\n\r\n// 设置请求拦截器，添加认证令牌\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// 登录 - 密码方式\r\nexport const login = async (contactType, contact, password) => {\r\n    try {\r\n        const response = await axios.post(`${API_URL}/login`, {\r\n            contactType,\r\n            contact,\r\n            password\r\n        });\r\n\r\n        // 存储用户信息和令牌\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n        localStorage.setItem('token', response.data.token);\r\n\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(\r\n            error.response?.data?.error || '登录失败，请检查您的凭据'\r\n        );\r\n    }\r\n};\r\n\r\n// 登录 - 验证码方式\r\nexport const loginWithVerification = async (contactType, contact, verificationCode) => {\r\n    try {\r\n        const response = await axios.post(`${API_URL}/login/verification`, {\r\n            contactType,\r\n            contact,\r\n            verificationCode\r\n        });\r\n\r\n        // 存储用户信息和令牌\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n        localStorage.setItem('token', response.data.token);\r\n\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(\r\n            error.response?.data?.error || '登录失败，验证码可能无效或已过期'\r\n        );\r\n    }\r\n};\r\n\r\n// 注册\r\nexport const register = async (\r\n    name,\r\n    contactType,\r\n    contact,\r\n    verificationCode,\r\n    password,\r\n    role\r\n) => {\r\n    try {\r\n        const response = await axios.post(`${API_URL}/register`, {\r\n            name,\r\n            contactType,\r\n            contact,\r\n            verificationCode,\r\n            password,\r\n            role\r\n        });\r\n\r\n        // 存储用户信息和令牌\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n        localStorage.setItem('token', response.data.token);\r\n\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(\r\n            error.response?.data?.error || '注册失败，请稍后重试'\r\n        );\r\n    }\r\n};\r\n\r\n// 登出\r\nexport const logout = async () => {\r\n    try {\r\n        await axios.post(`${API_URL}/logout`);\r\n\r\n        // 清除本地存储的用户信息和令牌\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('token');\r\n\r\n        return { success: true };\r\n    } catch (error) {\r\n        throw new Error(\r\n            error.response?.data?.error || '登出失败'\r\n        );\r\n    }\r\n};\r\n\r\n// 从localStorage获取当前用户信息\r\nexport const getCurrentUser = () => {\r\n    try {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) return null;\r\n\r\n        // 这里简单返回一个临时用户对象用于测试\r\n        // 实际应用中应解析JWT并获取真实用户信息\r\n        return {\r\n            id: '1',\r\n            name: '测试用户',\r\n            role: 'student'\r\n        };\r\n    } catch (error) {\r\n        console.error('获取当前用户失败:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// 更新用户资料\r\nexport const updateProfile = async (profileData) => {\r\n    try {\r\n        const response = await axios.patch(`${API_URL}/profile`, profileData);\r\n\r\n        // 更新本地存储的用户信息\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(\r\n            error.response?.data?.error || '更新资料失败'\r\n        );\r\n    }\r\n};\r\n\r\n// 教师实名认证\r\nexport const teacherVerification = async (verificationData) => {\r\n    try {\r\n        const response = await axios.post(\r\n            `${API_URL}/teacher/verify`,\r\n            verificationData\r\n        );\r\n\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(\r\n            error.response?.data?.error || '提交认证信息失败'\r\n        );\r\n    }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,WAAW;;AAE3B;AACAD,KAAK,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACvD;EACA,OAAOD,MAAM;AACjB,CAAC,EACAK,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,OAAO,MAAMG,KAAK,GAAG,MAAAA,CAAOC,WAAW,EAAEC,OAAO,EAAEC,QAAQ,KAAK;EAC3D,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,QAAQ,EAAE;MAClDa,WAAW;MACXC,OAAO;MACPC;IACJ,CAAC,CAAC;;IAEF;IACAT,YAAY,CAACY,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAACK,IAAI,CAACC,IAAI,CAAC,CAAC;IAChEhB,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACK,IAAI,CAAChB,KAAK,CAAC;IAElD,OAAOW,QAAQ,CAACK,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAM,IAAIc,KAAK,CACXd,KAAK,CAACO,QAAQ,EAAEK,IAAI,EAAEZ,KAAK,IAAI,cACnC,CAAC;EACL;AACJ,CAAC;;AAED;AACA,OAAO,MAAMe,qBAAqB,GAAG,MAAAA,CAAOX,WAAW,EAAEC,OAAO,EAAEW,gBAAgB,KAAK;EACnF,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,qBAAqB,EAAE;MAC/Da,WAAW;MACXC,OAAO;MACPW;IACJ,CAAC,CAAC;;IAEF;IACAnB,YAAY,CAACY,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAACK,IAAI,CAACC,IAAI,CAAC,CAAC;IAChEhB,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACK,IAAI,CAAChB,KAAK,CAAC;IAElD,OAAOW,QAAQ,CAACK,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAM,IAAIc,KAAK,CACXd,KAAK,CAACO,QAAQ,EAAEK,IAAI,EAAEZ,KAAK,IAAI,kBACnC,CAAC;EACL;AACJ,CAAC;;AAED;AACA,OAAO,MAAMiB,QAAQ,GAAG,MAAAA,CACpBC,IAAI,EACJd,WAAW,EACXC,OAAO,EACPW,gBAAgB,EAChBV,QAAQ,EACRa,IAAI,KACH;EACD,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,WAAW,EAAE;MACrD2B,IAAI;MACJd,WAAW;MACXC,OAAO;MACPW,gBAAgB;MAChBV,QAAQ;MACRa;IACJ,CAAC,CAAC;;IAEF;IACAtB,YAAY,CAACY,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAACK,IAAI,CAACC,IAAI,CAAC,CAAC;IAChEhB,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACK,IAAI,CAAChB,KAAK,CAAC;IAElD,OAAOW,QAAQ,CAACK,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAM,IAAIc,KAAK,CACXd,KAAK,CAACO,QAAQ,EAAEK,IAAI,EAAEZ,KAAK,IAAI,YACnC,CAAC;EACL;AACJ,CAAC;;AAED;AACA,OAAO,MAAMoB,MAAM,GAAG,MAAAA,CAAA,KAAY;EAC9B,IAAI;IACA,MAAM9B,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,SAAS,CAAC;;IAErC;IACAM,YAAY,CAACwB,UAAU,CAAC,MAAM,CAAC;IAC/BxB,YAAY,CAACwB,UAAU,CAAC,OAAO,CAAC;IAEhC,OAAO;MAAEC,OAAO,EAAE;IAAK,CAAC;EAC5B,CAAC,CAAC,OAAOtB,KAAK,EAAE;IACZ,MAAM,IAAIc,KAAK,CACXd,KAAK,CAACO,QAAQ,EAAEK,IAAI,EAAEZ,KAAK,IAAI,MACnC,CAAC;EACL;AACJ,CAAC;;AAED;AACA,OAAO,MAAMuB,cAAc,GAAGA,CAAA,KAAM;EAChC,IAAI;IACA,MAAM3B,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE,OAAO,IAAI;;IAEvB;IACA;IACA,OAAO;MACH4B,EAAE,EAAE,GAAG;MACPN,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;IACV,CAAC;EACL,CAAC,CAAC,OAAOnB,KAAK,EAAE;IACZyB,OAAO,CAACzB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAM0B,aAAa,GAAG,MAAOC,WAAW,IAAK;EAChD,IAAI;IACA,MAAMpB,QAAQ,GAAG,MAAMjB,KAAK,CAACsC,KAAK,CAAC,GAAGrC,OAAO,UAAU,EAAEoC,WAAW,CAAC;;IAErE;IACA9B,YAAY,CAACY,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAE3D,OAAOL,QAAQ,CAACK,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAM,IAAIc,KAAK,CACXd,KAAK,CAACO,QAAQ,EAAEK,IAAI,EAAEZ,KAAK,IAAI,QACnC,CAAC;EACL;AACJ,CAAC;;AAED;AACA,OAAO,MAAM6B,mBAAmB,GAAG,MAAOC,gBAAgB,IAAK;EAC3D,IAAI;IACA,MAAMvB,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAC7B,GAAGjB,OAAO,iBAAiB,EAC3BuC,gBACJ,CAAC;IAED,OAAOvB,QAAQ,CAACK,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAM,IAAIc,KAAK,CACXd,KAAK,CAACO,QAAQ,EAAEK,IAAI,EAAEZ,KAAK,IAAI,UACnC,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}