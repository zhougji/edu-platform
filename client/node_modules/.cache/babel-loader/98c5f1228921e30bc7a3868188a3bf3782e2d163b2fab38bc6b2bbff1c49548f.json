{"ast":null,"code":"import { ref, computed, onMounted, watch, nextTick } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport AIChat from '../../components/ai/AIChat.vue';\nimport AIChatHistory from '../../components/ai/AIChatHistory.vue';\nimport { getAiChatById, getAiChats, deleteAiChat, updateAiChat } from '../../services/aiService';\nexport default {\n  name: 'AiChatPage',\n  components: {\n    AIChat,\n    AIChatHistory\n  },\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n    const titleInput = ref(null);\n    const id = computed(() => route.params.id);\n    const isNewChat = computed(() => id.value === 'new');\n    const chat = ref(null);\n    const chatHistory = ref([]);\n    const loading = ref(!isNewChat.value);\n    const error = ref('');\n    const historyLoading = ref(true);\n    const isEditingTitle = ref(false);\n    const newTitle = ref('');\n\n    // 加载当前会话数据\n    onMounted(async () => {\n      if (isNewChat.value) {\n        loading.value = false;\n        return;\n      }\n      try {\n        loading.value = true;\n        const chatData = await getAiChatById(id.value);\n        chat.value = chatData;\n        newTitle.value = chatData.title;\n        loading.value = false;\n      } catch (err) {\n        error.value = err.message || '加载会话失败';\n        loading.value = false;\n        console.error('加载会话错误:', err);\n      }\n\n      // 加载会话历史\n      try {\n        historyLoading.value = true;\n        const result = await getAiChats();\n        chatHistory.value = result.data;\n        historyLoading.value = false;\n      } catch (err) {\n        console.error('加载会话历史错误:', err);\n        historyLoading.value = false;\n      }\n    });\n\n    // 删除会话\n    const handleDeleteChat = async chatId => {\n      if (!confirm('确定要删除这个会话吗？这将无法恢复。')) {\n        return;\n      }\n      try {\n        await deleteAiChat(chatId);\n\n        // 如果删除的是当前会话，则返回AI助手主页\n        if (chatId === id.value) {\n          router.push('/student/ai');\n          return;\n        }\n\n        // 更新会话历史列表\n        chatHistory.value = chatHistory.value.filter(c => c._id !== chatId);\n      } catch (err) {\n        alert(`删除会话失败: ${err.message}`);\n        console.error('删除会话错误:', err);\n      }\n    };\n\n    // 更新会话数据\n    const handleChatUpdate = updatedChat => {\n      chat.value = updatedChat;\n\n      // 如果是新会话，获取到ID后更新URL\n      if (isNewChat.value && updatedChat._id) {\n        router.replace(`/student/ai/chat/${updatedChat._id}`);\n\n        // 刷新会话历史\n        refreshChatHistory();\n      } else {\n        // 更新会话历史中的会话标题\n        chatHistory.value = chatHistory.value.map(c => c._id === updatedChat._id ? {\n          ...c,\n          title: updatedChat.title\n        } : c);\n      }\n    };\n\n    // 刷新会话历史\n    const refreshChatHistory = async () => {\n      try {\n        const result = await getAiChats();\n        chatHistory.value = result.data;\n      } catch (err) {\n        console.error('刷新会话历史错误:', err);\n      }\n    };\n\n    // 开始编辑标题\n    const startEditingTitle = () => {\n      if (!chat.value) return;\n      isEditingTitle.value = true;\n      newTitle.value = chat.value.title;\n\n      // 等待DOM更新后聚焦输入框\n      nextTick(() => {\n        titleInput.value.focus();\n      });\n    };\n\n    // 取消编辑标题\n    const cancelTitleEdit = () => {\n      isEditingTitle.value = false;\n      newTitle.value = chat.value.title;\n    };\n\n    // 更新标题\n    const handleTitleUpdate = async () => {\n      if (!chat.value) return;\n      try {\n        // 只有当标题发生变化时才更新\n        if (newTitle.value.trim() !== chat.value.title) {\n          const updatedChat = await updateAiChat(chat.value._id, {\n            title: newTitle.value.trim()\n          });\n          chat.value = updatedChat;\n\n          // 更新会话历史中的会话标题\n          chatHistory.value = chatHistory.value.map(c => c._id === updatedChat._id ? {\n            ...c,\n            title: updatedChat.title\n          } : c);\n        }\n\n        // 退出编辑模式\n        isEditingTitle.value = false;\n      } catch (err) {\n        alert(`更新标题失败: ${err.message}`);\n        console.error('更新标题错误:', err);\n      }\n    };\n    return {\n      id,\n      isNewChat,\n      chat,\n      chatHistory,\n      loading,\n      error,\n      historyLoading,\n      isEditingTitle,\n      newTitle,\n      titleInput,\n      handleDeleteChat,\n      handleChatUpdate,\n      startEditingTitle,\n      cancelTitleEdit,\n      handleTitleUpdate\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","watch","nextTick","useRoute","useRouter","AIChat","AIChatHistory","getAiChatById","getAiChats","deleteAiChat","updateAiChat","name","components","setup","route","router","titleInput","id","params","isNewChat","value","chat","chatHistory","loading","error","historyLoading","isEditingTitle","newTitle","chatData","title","err","message","console","result","data","handleDeleteChat","chatId","confirm","push","filter","c","_id","alert","handleChatUpdate","updatedChat","replace","refreshChatHistory","map","startEditingTitle","focus","cancelTitleEdit","handleTitleUpdate","trim"],"sources":["D:\\Code\\coding\\edu-platform\\client\\src\\views\\student\\AiChatPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-page\">\r\n    <div class=\"chat-sidebar\">\r\n      <AIChatHistory :chats=\"chatHistory\" :onDeleteChat=\"handleDeleteChat\" />\r\n    </div>\r\n\r\n    <div class=\"chat-main\">\r\n      <div v-if=\"loading\" class=\"loading-overlay\">\r\n        <i class=\"fas fa-spinner fa-spin\"></i>\r\n        <span>加载中...</span>\r\n      </div>\r\n      <div v-else-if=\"error\" class=\"error-overlay\">\r\n        <i class=\"fas fa-exclamation-circle\"></i>\r\n        <span>{{ error }}</span>\r\n        <router-link to=\"/student/ai\" class=\"back-btn\">返回AI助手</router-link>\r\n      </div>\r\n      <template v-else>\r\n        <div class=\"chat-header\">\r\n          <div v-if=\"isEditingTitle\" class=\"title-edit-form\">\r\n            <div class=\"title-input-group\">\r\n              <input type=\"text\" v-model=\"newTitle\" @keyup.enter=\"handleTitleUpdate\" @blur=\"handleTitleUpdate\"\r\n                class=\"title-input\" ref=\"titleInput\" />\r\n              <div class=\"title-actions\">\r\n                <button @click=\"handleTitleUpdate\" class=\"save-btn\" title=\"保存\">\r\n                  <i class=\"fas fa-check\"></i>\r\n                </button>\r\n                <button @click=\"cancelTitleEdit\" class=\"cancel-btn\" title=\"取消\">\r\n                  <i class=\"fas fa-times\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div v-else class=\"chat-title\" @click=\"startEditingTitle\">\r\n            <h2>{{ chat?.title || '新会话' }}</h2>\r\n            <button class=\"edit-title-btn\" title=\"编辑标题\">\r\n              <i class=\"fas fa-edit\"></i>\r\n            </button>\r\n          </div>\r\n\r\n          <div class=\"chat-meta\">\r\n            <span class=\"chat-subject\">\r\n              <i class=\"fas fa-tag\"></i> {{ chat?.subject || '通用' }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"chat-content\">\r\n          <AIChat :chat=\"chat\" :onChatUpdate=\"handleChatUpdate\" />\r\n        </div>\r\n      </template>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, watch, nextTick } from 'vue'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport AIChat from '../../components/ai/AIChat.vue'\r\nimport AIChatHistory from '../../components/ai/AIChatHistory.vue'\r\nimport { getAiChatById, getAiChats, deleteAiChat, updateAiChat } from '../../services/aiService'\r\n\r\nexport default {\r\n  name: 'AiChatPage',\r\n  components: {\r\n    AIChat,\r\n    AIChatHistory\r\n  },\r\n  setup() {\r\n    const route = useRoute()\r\n    const router = useRouter()\r\n    const titleInput = ref(null)\r\n\r\n    const id = computed(() => route.params.id)\r\n    const isNewChat = computed(() => id.value === 'new')\r\n\r\n    const chat = ref(null)\r\n    const chatHistory = ref([])\r\n    const loading = ref(!isNewChat.value)\r\n    const error = ref('')\r\n    const historyLoading = ref(true)\r\n    const isEditingTitle = ref(false)\r\n    const newTitle = ref('')\r\n\r\n    // 加载当前会话数据\r\n    onMounted(async () => {\r\n      if (isNewChat.value) {\r\n        loading.value = false\r\n        return\r\n      }\r\n\r\n      try {\r\n        loading.value = true\r\n        const chatData = await getAiChatById(id.value)\r\n        chat.value = chatData\r\n        newTitle.value = chatData.title\r\n        loading.value = false\r\n      } catch (err) {\r\n        error.value = err.message || '加载会话失败'\r\n        loading.value = false\r\n        console.error('加载会话错误:', err)\r\n      }\r\n\r\n      // 加载会话历史\r\n      try {\r\n        historyLoading.value = true\r\n        const result = await getAiChats()\r\n        chatHistory.value = result.data\r\n        historyLoading.value = false\r\n      } catch (err) {\r\n        console.error('加载会话历史错误:', err)\r\n        historyLoading.value = false\r\n      }\r\n    })\r\n\r\n    // 删除会话\r\n    const handleDeleteChat = async (chatId) => {\r\n      if (!confirm('确定要删除这个会话吗？这将无法恢复。')) {\r\n        return\r\n      }\r\n\r\n      try {\r\n        await deleteAiChat(chatId)\r\n\r\n        // 如果删除的是当前会话，则返回AI助手主页\r\n        if (chatId === id.value) {\r\n          router.push('/student/ai')\r\n          return\r\n        }\r\n\r\n        // 更新会话历史列表\r\n        chatHistory.value = chatHistory.value.filter(c => c._id !== chatId)\r\n      } catch (err) {\r\n        alert(`删除会话失败: ${err.message}`)\r\n        console.error('删除会话错误:', err)\r\n      }\r\n    }\r\n\r\n    // 更新会话数据\r\n    const handleChatUpdate = (updatedChat) => {\r\n      chat.value = updatedChat\r\n\r\n      // 如果是新会话，获取到ID后更新URL\r\n      if (isNewChat.value && updatedChat._id) {\r\n        router.replace(`/student/ai/chat/${updatedChat._id}`)\r\n\r\n        // 刷新会话历史\r\n        refreshChatHistory()\r\n      } else {\r\n        // 更新会话历史中的会话标题\r\n        chatHistory.value = chatHistory.value.map(c =>\r\n          c._id === updatedChat._id ? { ...c, title: updatedChat.title } : c\r\n        )\r\n      }\r\n    }\r\n\r\n    // 刷新会话历史\r\n    const refreshChatHistory = async () => {\r\n      try {\r\n        const result = await getAiChats()\r\n        chatHistory.value = result.data\r\n      } catch (err) {\r\n        console.error('刷新会话历史错误:', err)\r\n      }\r\n    }\r\n\r\n    // 开始编辑标题\r\n    const startEditingTitle = () => {\r\n      if (!chat.value) return\r\n\r\n      isEditingTitle.value = true\r\n      newTitle.value = chat.value.title\r\n\r\n      // 等待DOM更新后聚焦输入框\r\n      nextTick(() => {\r\n        titleInput.value.focus()\r\n      })\r\n    }\r\n\r\n    // 取消编辑标题\r\n    const cancelTitleEdit = () => {\r\n      isEditingTitle.value = false\r\n      newTitle.value = chat.value.title\r\n    }\r\n\r\n    // 更新标题\r\n    const handleTitleUpdate = async () => {\r\n      if (!chat.value) return\r\n\r\n      try {\r\n        // 只有当标题发生变化时才更新\r\n        if (newTitle.value.trim() !== chat.value.title) {\r\n          const updatedChat = await updateAiChat(chat.value._id, { title: newTitle.value.trim() })\r\n          chat.value = updatedChat\r\n\r\n          // 更新会话历史中的会话标题\r\n          chatHistory.value = chatHistory.value.map(c =>\r\n            c._id === updatedChat._id ? { ...c, title: updatedChat.title } : c\r\n          )\r\n        }\r\n\r\n        // 退出编辑模式\r\n        isEditingTitle.value = false\r\n      } catch (err) {\r\n        alert(`更新标题失败: ${err.message}`)\r\n        console.error('更新标题错误:', err)\r\n      }\r\n    }\r\n\r\n    return {\r\n      id,\r\n      isNewChat,\r\n      chat,\r\n      chatHistory,\r\n      loading,\r\n      error,\r\n      historyLoading,\r\n      isEditingTitle,\r\n      newTitle,\r\n      titleInput,\r\n      handleDeleteChat,\r\n      handleChatUpdate,\r\n      startEditingTitle,\r\n      cancelTitleEdit,\r\n      handleTitleUpdate\r\n    }\r\n  }\r\n}\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}